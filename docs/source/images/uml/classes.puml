@startuml classes
set namespaceSeparator none
class "AURAOptions" as thuner.data.aura.AURAOptions {
  data_format : Literal['grid_150km_2500m', 'grid_70km_1000m']
  fields : list[str]
  level : Literal['1', '1b', '2']
  range : float
  range_units : str
}
class "Altitude" as thuner.attribute.profile.Altitude {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "AnalysisOptions" as thuner.analyze.mcs.AnalysisOptions {
  max_area : float
  max_boundary_overlap : float
  min_area : float
  min_axis_ratio : float
  min_duration : float
  min_major_axis_length : float
  min_offset : float
  min_relative_velocity : float
  min_shear : float
  min_velocity : float
  quadrant_buffer_angle : float
  window_size : int
}
class "AreasMask" as thuner.attribute.core.AreasMask {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "AreasRecord" as thuner.attribute.core.AreasRecord {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "Attribute" as thuner.option.attribute.Attribute {
  data_type : type | str
  description : str | None
  name : str
  precision : int | None
  retrieval : Retrieval | None
  units : str | None
  check_data_type(values)
}
class "AttributeGroup" as thuner.option.attribute.AttributeGroup {
  attributes : list[Attribute]
  description : str | None
  name : str
  retrieval : Retrieval | None
  check_retrieval(values)
}
class "AttributeType" as thuner.option.attribute.AttributeType {
  attributes : list
  dataset : str | None
  description : str | None
  name : str
}
class "Attributes" as thuner.option.attribute.Attributes {
  attribute_types : list[AttributeType]
  member_attributes : AttributesDict | None
  name : str
}
class "AttributesRecord" as thuner.attribute.utils.AttributesRecord {
  attribute_options
  attribute_types : dict | None
  member_attributes : dict | None
  name : Optional[str]
}
class "BaseDatasetOptions" as thuner.utils.BaseDatasetOptions {
  attempt_download : bool
  converted_options
  deque_length : int
  end : str | np.datetime64
  end_buffer : int
  fields : list[str] | None
  filepaths : list[str] | dict
  name : str
  parent_local : str | Path | None
  parent_remote : str | None
  start : str | np.datetime64
  start_buffer : int
  use : Literal['track', 'tag']
}
class "BaseInputRecord" as thuner.track.utils.BaseInputRecord {
  dataset : xr.Dataset | xr.DataArray | None
  filepaths : list[str] | dict | None
  name : str
  write_interval
}
class "BaseLayout" as thuner.visualize.horizontal.BaseLayout {
  columns : int
  figure_height : NoneType
  figure_width : NoneType
  horizontal_spacing : float
  rows : int
  subplot_height : float
  subplot_width : float
  vertical_spacing : float
  rescale_figure(fig, new_width)
}
class "BaseObjectOptions" as thuner.option.track.BaseObjectOptions {
  allowed_gap : int
  attributes : Attributes | None
  dataset : str
  deque_length : int
  hierarchy_level : int
  mask_options
  method : Literal['detect', 'group']
  name : str
  write_interval : int
}
class "BaseOptions" as thuner.utils.BaseOptions {
  type : str
  convert_floats(values)
  to_dict() -> Dict[str, Any]
  to_yaml(filepath: str)
}
class "BoundaryOverlap" as thuner.attribute.quality.BoundaryOverlap {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval
}
class "CAPE" as thuner.attribute.tag.CAPE {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "CIN" as thuner.attribute.tag.CIN {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "CPOLOptions" as thuner.data.aura.CPOLOptions {
  data_format : str
  fields : list[str]
  level : str
  name : str
  parent_remote : str
  version : str
}
class "Config" as thuner.utils.BaseOptions.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.attribute.utils.AttributesRecord.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.track.utils.BaseInputRecord.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.track.utils.InputRecords.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.track.utils.ObjectTracks.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.track.utils.LevelTracks.Config {
  arbitrary_types_allowed : bool
}
class "Config" as thuner.track.utils.Tracks.Config {
  arbitrary_types_allowed : bool
}
class "ConvertedOptions" as thuner.utils.ConvertedOptions {
  load : bool
  parent_converted : str | None
  save : bool
}
class "CoordinatesMask" as thuner.attribute.core.CoordinatesMask {
  attributes : list
  description : str
  name : str
  retrieval : Retrieval | None
}
class "CoordinatesRecord" as thuner.attribute.core.CoordinatesRecord {
  attributes : list
  description : str
  name : str
  retrieval : Retrieval | None
}
class "DataOptions" as thuner.option.data.DataOptions {
  datasets : list[AnyDatasetOptions]
  dataset_by_name(dataset_name: str) -> AnyDatasetOptions
  initialize_dataset_lookup(values)
}
class "DetectedObjectOptions" as thuner.option.track.DetectedObjectOptions {
  attributes
  detection
  mask_options
  tracking : BaseOptions | None
  variable : str
}
class "DetectionOptions" as thuner.option.track.DetectionOptions {
  altitudes : List[int]
  flatten_method : str
  method : Literal['steiner', 'threshold']
  min_area : int
  threshold : int | None
}
class "DisplacementVelocity" as thuner.attribute.core.DisplacementVelocity {
  attributes : list
  description : str
  name : str
  retrieval : Retrieval | None
}
class "DownloadState" as thuner.data.utils.DownloadState {
  last_request_time : float
  lock_filepath
  process_lock : Lock
  thread_lock : lock
  wait_time : int
  wait_for_lockfile()
}
class "ERA5Options" as thuner.data.era5.ERA5Options {
  data_format : Literal['pressure-levels', 'single-levels']
  latitude_range : list[float]
  longitude_range : list[float]
  mode : Literal['reanalysis']
  name : str
  parent_remote : str
  pressure_levels : list[str] | list[float] | None
  start_buffer : int
  storage : str
  use : Literal['track', 'tag']
}
class "Eccentricity" as thuner.attribute.ellipse.Eccentricity {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str | None
}
class "EchoTopHeight" as thuner.attribute.core.EchoTopHeight {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "EllipseFit" as thuner.attribute.ellipse.EllipseFit {
  attributes : list[Attribute]
  description : str
  name : str
  retrieval
}
class "FigureOptions" as thuner.option.visualize.FigureOptions {
  animate : bool
  function : Callable | str | None
  name : str
  single_color : bool
  style : str
  template : Any
}
class "FlowVelocity" as thuner.attribute.core.FlowVelocity {
  attributes : list
  description : str
  name : str
  retrieval : Retrieval | None
}
class "GridOptions" as thuner.option.grid.GridOptions {
  altitude : list[float] | None
  altitude_spacing : float | None
  cartesian_spacing : list[float] | None
  central_latitude : float | None
  central_longitude : float | None
  geographic_spacing : list[float] | None
  latitude : list[float] | None
  longitude : list[float] | None
  name : str
  projection : str | None
  regrid : bool
  save : bool
  shape : tuple[int, int] | None
  x : list[float] | None
  y : list[float] | None
}
class "GridRadSevereOptions" as thuner.data.gridrad.GridRadSevereOptions {
  dataset_id : str
  event_start : str
  fields : list[str]
  name : str
  obs_thresh : int
  parent_remote : str
  version : str
}
class "GroupedObjectOptions" as thuner.option.track.GroupedObjectOptions {
  grouping
  tracking
}
class "GroupingOptions" as thuner.option.track.GroupingOptions {
  member_levels : List[NonNegativeInt]
  member_min_areas : List[PositiveFloat]
  member_objects : List[str]
  method : str
}
class "HorizontalAttributeOptions" as thuner.option.visualize.HorizontalAttributeOptions {
  attributes : list[str]
  extent : list[float] | None
  fields : list[str]
  name : str
  quality_control : bool
  single_color : bool
  template : Any
}
class "InputRecords" as thuner.track.utils.InputRecords {
  data_options
  tag : Dict[str, BaseInputRecord]
  track : Dict[str, TrackInputRecord]
}
class "Latitude" as thuner.attribute.core.Latitude {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval
  units : str
}
class "Latitude" as thuner.attribute.ellipse.Latitude {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "LevelOptions" as thuner.option.track.LevelOptions {
  objects : List[AnyObjectOptions]
  initialize_object_lookup(values)
  options_by_name(obj_name: str) -> BaseObjectOptions
}
class "LevelTracks" as thuner.track.utils.LevelTracks {
  level_options
  objects : dict[str, ObjectTracks]
}
class "Longitude" as thuner.attribute.core.Longitude {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval
  units : str
}
class "Longitude" as thuner.attribute.ellipse.Longitude {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "Major" as thuner.attribute.ellipse.Major {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "MaskID" as thuner.attribute.core.MaskID {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
}
class "MaskOptions" as thuner.option.track.MaskOptions {
  load : bool
  save : bool
}
class "MaskUniversalID" as thuner.attribute.core.MaskUniversalID {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
}
class "Minor" as thuner.attribute.ellipse.Minor {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "MintOptions" as thuner.option.track.MintOptions {
  local_flow_margin : int
  max_velocity_diff_alt : int
  name : str
  search_margin : int
}
class "NoAliasDumper" as thuner.write.attribute.NoAliasDumper {
  ignore_aliases(data)
}
class "ObjectRuntimeOptions" as thuner.option.visualize.ObjectRuntimeOptions {
  animate : bool
  figures : list[FigureOptions]
  name : str
  single_color : bool
  initialize_figures(values)
}
class "ObjectTracks" as thuner.track.utils.ObjectTracks {
  attributes : AttributesRecord | None
  current_attributes : AttributesRecord | None
  deque_length : int
  gridcell_area : xr.DataArray | xr.Dataset | None
  grids : deque | None
  masks : deque | None
  match_record : dict | None
  matched_masks : deque | None
  name : str | None
  next_grid : xr.DataArray | xr.Dataset | None
  next_mask : xr.DataArray | xr.Dataset | None
  next_matched_mask : xr.DataArray | xr.Dataset | None
  next_time : np.datetime64 | None
  next_time_interval : np.timedelta64 | None
  object_count : int
  object_options
  previous_match_records : deque | None
  previous_time_interval : deque | None
  times : deque | None
}
class "Offset" as thuner.attribute.group.Offset {
  attributes : list[Attribute]
  description : str
  name : str
  retrieval
}
class "OperationalOptions" as thuner.data.aura.OperationalOptions {
  data_format : str
  level : str
  name : str
  parent_remote : str
  radar : int
  weighting_function : str
}
class "Orientation" as thuner.attribute.ellipse.Orientation {
  data_type : type
  description : str
  name : str
  precision : int
  retrieval : Retrieval | None
  units : str
}
class "Panelled" as thuner.visualize.horizontal.Panelled {
  colorbar : bool
  fig
  figure_height : float
  figure_width : float
  grid_spec
  label_offset_x : float
  label_offset_y : float
  legend_rows : int | None
  projections : Any | List[Any] | None
  shared_legends : Optional[Literal['columns', 'all', None]]
  suptitle_height : float, int
  initialize_gridspec()
  initialize_layout()
  initialize_legend(subplot_axes)
}
class "PanelledUniformMaps" as thuner.visualize.horizontal.PanelledUniformMaps {
  border_zorder : int
  coastline_zorder : int
  colorbar : bool
  extent : List[float]
  grid_zorder : int
  legend_rows : int | None
  suptitle_height : int
  initialize_layout()
}
class "Parents" as thuner.attribute.core.Parents {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
}
class "Pressure" as thuner.attribute.profile.Pressure {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "ProfileCenter" as thuner.attribute.profile.ProfileCenter {
  attributes : list[Attribute]
  description : str
  name : str
  retrieval
}
class "RecordID" as thuner.attribute.core.RecordID {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
}
class "RecordUniversalID" as thuner.attribute.core.RecordUniversalID {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
}
class "RelativeHumidity" as thuner.attribute.profile.RelativeHumidity {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "Retrieval" as thuner.option.attribute.Retrieval {
  function : Callable | str | None
  keyword_arguments : dict
  check_function(values)
}
class "RuntimeOptions" as thuner.option.visualize.RuntimeOptions {
  objects : dict[str, ObjectRuntimeOptions]
}
class "SingletonBase" as thuner.utils.SingletonBase {
}
class "SyntheticOptions" as thuner.data.synthetic.SyntheticOptions {
  end : str
  fields : list[str]
  name : str
  start : str
  starting_objects : list[dict] | None
  use : str
}
class "TagCenter" as thuner.attribute.tag.TagCenter {
  attributes : list[Attribute]
  description : str
  name : str
  retrieval
}
class "Temperature" as thuner.attribute.profile.Temperature {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "Time" as thuner.attribute.core.Time {
  data_type : type
  description : str
  name : str
  retrieval : Retrieval | None
  units : str
}
class "TimeOffset" as thuner.attribute.utils.TimeOffset {
  data_type : type
  description : str
  name : str
  units : str
}
class "TintOptions" as thuner.option.track.TintOptions {
  global_flow_margin : float
  local_flow_margin : float
  matched_object : str | None
  max_cost : float
  max_velocity_diff : float
  max_velocity_mag : float
  name : str
  search_margin : float
  unique_global_flow : bool
}
class "TrackInputRecord" as thuner.track.utils.TrackInputRecord {
  boundary_coodinates : deque | None
  boundary_masks : deque | None
  deque_length : int
  domain_masks : deque | None
  grids : deque | None
  next_boundary_coordinates : xr.DataArray | xr.Dataset | None
  next_boundary_mask : xr.DataArray | xr.Dataset | None
  next_domain_mask : xr.DataArray | xr.Dataset | None
  next_grid : xr.DataArray | xr.Dataset | None
  synthetic_base_dataset : xr.DataArray | xr.Dataset | None
  synthetic_objects : list[dict] | None
}
class "TrackOptions" as thuner.option.track.TrackOptions {
  levels : List[LevelOptions]
  initialize_object_lookup(values)
  options_by_name(obj_name: str) -> BaseObjectOptions
}
class "Tracks" as thuner.track.utils.Tracks {
  levels : list[LevelTracks]
  track_options
}
class "U" as thuner.attribute.profile.U {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "UDisplacement" as thuner.attribute.core.UDisplacement {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "UFlow" as thuner.attribute.core.UFlow {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "V" as thuner.attribute.profile.V {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "VDisplacement" as thuner.attribute.core.VDisplacement {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "VFlow" as thuner.attribute.core.VFlow {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "VisualizeOptions" as thuner.option.visualize.VisualizeOptions {
  parent_local : str | PosixPath | None
  style : str
  validate_parent_local(values)
}
class "XOffset" as thuner.attribute.group.XOffset {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
class "YOffset" as thuner.attribute.group.YOffset {
  data_type : type
  description : str
  name : str
  precision : int
  units : str
}
thuner.analyze.mcs.AnalysisOptions --|> thuner.utils.BaseOptions
thuner.attribute.core.AreasMask --|> thuner.option.attribute.Attribute
thuner.attribute.core.AreasRecord --|> thuner.option.attribute.Attribute
thuner.attribute.core.CoordinatesMask --|> thuner.option.attribute.AttributeGroup
thuner.attribute.core.CoordinatesRecord --|> thuner.option.attribute.AttributeGroup
thuner.attribute.core.DisplacementVelocity --|> thuner.option.attribute.AttributeGroup
thuner.attribute.core.EchoTopHeight --|> thuner.option.attribute.Attribute
thuner.attribute.core.FlowVelocity --|> thuner.option.attribute.AttributeGroup
thuner.attribute.core.Latitude --|> thuner.option.attribute.Attribute
thuner.attribute.core.Longitude --|> thuner.option.attribute.Attribute
thuner.attribute.core.MaskID --|> thuner.option.attribute.Attribute
thuner.attribute.core.MaskUniversalID --|> thuner.option.attribute.Attribute
thuner.attribute.core.Parents --|> thuner.option.attribute.Attribute
thuner.attribute.core.RecordID --|> thuner.option.attribute.Attribute
thuner.attribute.core.RecordUniversalID --|> thuner.option.attribute.Attribute
thuner.attribute.core.Time --|> thuner.option.attribute.Attribute
thuner.attribute.core.UDisplacement --|> thuner.option.attribute.Attribute
thuner.attribute.core.UFlow --|> thuner.option.attribute.Attribute
thuner.attribute.core.VDisplacement --|> thuner.option.attribute.Attribute
thuner.attribute.core.VFlow --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.Eccentricity --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.EllipseFit --|> thuner.option.attribute.AttributeGroup
thuner.attribute.ellipse.Latitude --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.Longitude --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.Major --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.Minor --|> thuner.option.attribute.Attribute
thuner.attribute.ellipse.Orientation --|> thuner.option.attribute.Attribute
thuner.attribute.group.Offset --|> thuner.option.attribute.AttributeGroup
thuner.attribute.group.XOffset --|> thuner.option.attribute.Attribute
thuner.attribute.group.YOffset --|> thuner.option.attribute.Attribute
thuner.attribute.profile.Altitude --|> thuner.option.attribute.Attribute
thuner.attribute.profile.Pressure --|> thuner.option.attribute.Attribute
thuner.attribute.profile.ProfileCenter --|> thuner.option.attribute.AttributeGroup
thuner.attribute.profile.RelativeHumidity --|> thuner.option.attribute.Attribute
thuner.attribute.profile.Temperature --|> thuner.option.attribute.Attribute
thuner.attribute.profile.U --|> thuner.option.attribute.Attribute
thuner.attribute.profile.V --|> thuner.option.attribute.Attribute
thuner.attribute.quality.BoundaryOverlap --|> thuner.option.attribute.Attribute
thuner.attribute.tag.CAPE --|> thuner.option.attribute.Attribute
thuner.attribute.tag.CIN --|> thuner.option.attribute.Attribute
thuner.attribute.tag.TagCenter --|> thuner.option.attribute.AttributeGroup
thuner.attribute.utils.TimeOffset --|> thuner.option.attribute.Attribute
thuner.data.aura.AURAOptions --|> thuner.utils.BaseDatasetOptions
thuner.data.aura.CPOLOptions --|> thuner.data.aura.AURAOptions
thuner.data.aura.OperationalOptions --|> thuner.data.aura.AURAOptions
thuner.data.era5.ERA5Options --|> thuner.utils.BaseDatasetOptions
thuner.data.gridrad.GridRadSevereOptions --|> thuner.utils.BaseDatasetOptions
thuner.data.synthetic.SyntheticOptions --|> thuner.utils.BaseDatasetOptions
thuner.data.utils.DownloadState --|> thuner.utils.SingletonBase
thuner.option.attribute.Attribute --|> thuner.utils.BaseOptions
thuner.option.attribute.AttributeGroup --|> thuner.utils.BaseOptions
thuner.option.attribute.AttributeType --|> thuner.utils.BaseOptions
thuner.option.attribute.Attributes --|> thuner.utils.BaseOptions
thuner.option.attribute.Retrieval --|> thuner.utils.BaseOptions
thuner.option.data.DataOptions --|> thuner.utils.BaseOptions
thuner.option.grid.GridOptions --|> thuner.utils.BaseOptions
thuner.option.track.BaseObjectOptions --|> thuner.utils.BaseOptions
thuner.option.track.DetectedObjectOptions --|> thuner.option.track.BaseObjectOptions
thuner.option.track.DetectionOptions --|> thuner.utils.BaseOptions
thuner.option.track.GroupedObjectOptions --|> thuner.option.track.BaseObjectOptions
thuner.option.track.GroupingOptions --|> thuner.utils.BaseOptions
thuner.option.track.LevelOptions --|> thuner.utils.BaseOptions
thuner.option.track.MaskOptions --|> thuner.utils.BaseOptions
thuner.option.track.MintOptions --|> thuner.option.track.TintOptions
thuner.option.track.TintOptions --|> thuner.utils.BaseOptions
thuner.option.track.TrackOptions --|> thuner.utils.BaseOptions
thuner.option.visualize.FigureOptions --|> thuner.utils.BaseOptions
thuner.option.visualize.HorizontalAttributeOptions --|> thuner.option.visualize.VisualizeOptions
thuner.option.visualize.ObjectRuntimeOptions --|> thuner.option.visualize.VisualizeOptions
thuner.option.visualize.RuntimeOptions --|> thuner.utils.BaseOptions
thuner.option.visualize.VisualizeOptions --|> thuner.utils.BaseOptions
thuner.track.utils.TrackInputRecord --|> thuner.track.utils.BaseInputRecord
thuner.utils.BaseDatasetOptions --|> thuner.utils.BaseOptions
thuner.utils.ConvertedOptions --|> thuner.utils.BaseOptions
thuner.visualize.horizontal.Panelled --|> thuner.visualize.horizontal.BaseLayout
thuner.visualize.horizontal.PanelledUniformMaps --|> thuner.visualize.horizontal.Panelled
thuner.option.attribute.Attributes --* thuner.attribute.utils.AttributesRecord : attribute_options
thuner.option.attribute.Retrieval --* thuner.attribute.core.Latitude : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.core.Longitude : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.core.RecordUniversalID : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.core.Time : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.ellipse.EllipseFit : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.group.Offset : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.profile.ProfileCenter : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.quality.BoundaryOverlap : retrieval
thuner.option.attribute.Retrieval --* thuner.attribute.tag.TagCenter : retrieval
thuner.option.data.DataOptions --* thuner.track.utils.InputRecords : data_options
thuner.option.track.BaseObjectOptions --* thuner.track.utils.ObjectTracks : object_options
thuner.option.track.DetectionOptions --* thuner.option.track.DetectedObjectOptions : detection
thuner.option.track.GroupingOptions --* thuner.option.track.GroupedObjectOptions : grouping
thuner.option.track.LevelOptions --* thuner.track.utils.LevelTracks : level_options
thuner.option.track.MaskOptions --* thuner.option.track.BaseObjectOptions : mask_options
thuner.option.track.MintOptions --* thuner.option.track.DetectedObjectOptions : tracking
thuner.option.track.TrackOptions --* thuner.track.utils.Tracks : track_options
thuner.utils.ConvertedOptions --* thuner.utils.BaseDatasetOptions : converted_options
thuner.option.attribute.Attributes --o thuner.option.track.DetectedObjectOptions : attributes
thuner.option.track.MaskOptions --o thuner.option.track.DetectedObjectOptions : mask_options
@enduml
